package ids.publisherApp.rest;

import org.apache.commons.logging.LogFactory;

@Path("")
@Produces("application/json")
public class PublisherAppMaganerRestImpl {

	public final static String MEDIATYPE_JSON="application/json";		
	
	
	private static Log log =LogFactory.getLog(PublisherAppMaganerRestImpl.class);
	
	MqttPublisher MqttPublisher = null;
	
	public SigfoxManagerRestImpl() {
		
		MqttPublisher = new MqttPublisher();	
	}
	
	@POST
	@Consumes(MEDIATYPE_JSON)
	@Path("/publishMessage/")
	public Response publishMessage(MessageEntity messageEntity)  {
		
		boolean messagePublished = false;
		Response response = null;
		
		log.debug("Message received");
		
		try {
			
			log.debug("Connecting with the MQTT broker");
			MqttPublisher.setConnection();
			log.debug("Connected to the MQTT broker successfully");		
			
			log.debug("Publishing received message");
			
			messagePublished = MqttPublisher.publishMqttMessage(messageEntity);
			
			if(messagePublished==true){
				log.debug("Message published successfully");
				response= Response.ok(messagePublished).build();
				log.debug("Closing the connection");
				MqttPublisher.closeConnection();
				log.debug("Connection closed successfully");
			}
			else{
				log.error("Error while publishing message");
				response = Response.status(Response.Status.BAD_REQUEST).entity("sigfox.publishMessage is FALSE").build();
				log.debug("Closing the connection");
				MqttPublisher.closeConnection();
				log.debug("Connection closed successfully");
			}
				
		
		} catch (Exception e) {
			log.error("Error while connecting, publishing or closing the connection",e);
			response = Response.status(Response.Status.BAD_REQUEST).entity("sigfox.publishMessage Exception " + e.getMessage()).build();
			try {
				log.debug("Closing the connection");
				MqttPublisher.closeConnection();
				log.debug("Connection closed successfully");
			} catch (MqttException e1) {
				log.error("Error while closing the connection");
			}
		}	
		
		
		return response;
	}
	
}
